<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.tedu.boot08.mapper.ProductMapper"><!--指定要操作的mapper对象-->
    <!--1.插入标签-->
    <insert id="insert">
        INSERT INTO product
        VALUES (NULL, #{title}, #{price}, #{num})
    </insert>

    <!--2.删除标签-->
    <delete id="deleteById">
        DELETE
        FROM product
        WHERE id = #{id}
    </delete>

    <!--3.修改标签-->
    <update id="update">
        UPDATE product
        SET title=#{title},
            price=#{price},
            num=#{num}
        WHERE id = #{id}
    </update>

    <!--4.查询标签(查所有)     resultType设置结果返回的类型(此处为引用类型,需添加对象的path)-->
    <select id="select" resultType="cn.tedu.boot08.entity.Product">
        SELECT id, title, price, num
        FROM product
    </select>

    <!--5.查询标签(查单个)-->
    <select id="selectById" resultType="cn.tedu.boot08.entity.Product">
        SELECT id, title, price, num
        FROM product
        WHERE id = #{id}
    </select>

    <!--6.查询标签(Count(*)查数量)  resultType设置返回的基本类型int-->
    <select id="count" resultType="int">
        SELECT count(*)
        FROM product
    </select>

    <!--概念:
    ★动态SQL:动态根据传过来的参数类型(普通元素集合,对象集合,普通元素数组,任意数量的类型(Integer...))来进行批量修改
        (1).需要用到foreach循环遍历标签,
        (2).collection的值如果是List集合则写list,如果不是List集合则写array,
        (3).item代表遍历的集合中变量,
        (4).separator代表分隔符
        -->
    <!--7.批量删除 将要删除的商品id放入WHERE过滤条件中-->
    <!--★此处foreach遍历的是List<Integer>集合中的元素-->
    <delete id="deleteByIds1">
        DELETE FROM product
        WHERE id IN(
        <foreach collection="list" item="id" separator=",">
            #{id}
        </foreach>
        )
    </delete>
    <!--★此处foreach遍历的是Integer[]数组中的元素-->
    <delete id="deleteByIds2">
        DELETE FROM product
        WHERE id IN(
        <foreach collection="array" item="id" separator=",">
            #{id}
        </foreach>
        )
    </delete>
    <!--★此处foreach遍历的是Integer...任意数量Integer类型中的元素-->
    <delete id="deleteByIds3">
        DELETE FROM product
        WHERE id IN(
        <foreach collection="array" item="id" separator=",">
            #{id}
        </foreach>
        )
    </delete>

    <!--8.批量插入 ★此处foreach遍历的是List<Product>集合中的对象,要插入的属性值需要用对象打点-->
    <insert id="insertProducts">
        INSERT INTO product
        VALUES
        <foreach collection="list" item="p" separator=",">
            (
            NULL,#{p.title},#{p.price},#{p.num}
            )
        </foreach>
    </insert>

    <!--9.动态选择性插入数据
    (1).trim标签:用于去除sql中多余关键字,添加前缀等选择性插入、更新、删除或者条件查询的操作。
    (2).prefix属性用于给sql语句拼接的前缀
    (3).suffix属性用于给sql语句拼接的后缀
    (4).suffixOverrides属性用户去除sql语句后面多余的","
    (5).if标签用户在test属性中写判断条件
    -->
    <!--
    INSERT INTO product(title,price,num) VALUES(#{title},#{price},#{num})
    在指定三个不为空的字段,#{变量名}会自动往指定方法的参数列表中获取参数,如果是对象,会自动利用getter获取(底层看不见)
    最后进行选择性插入,未插入的字段会保留原来的值
    -->
    <insert id="dynamicInsert">
        INSERT INTO product
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="title!=null">title,</if>
            <if test="price!=null">price,</if>
            <if test="num!=null">num</if>
        </trim>
        VALUES
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="title!=null">#{title},</if>
            <if test="price!=null">#{price},</if>
            <if test="num!=null">#{num}</if>
        </trim>
    </insert>

    <!--10.动态选择性修改数据
    UPDATE product title=#{title},price=#{price},num=#{num} WHERE id=#{id}
    set标签会自动去掉后面多余的逗号,#{变量名}会自动用getter获取参数列表对象中的参数
    来对三个字段进行修改,未修改的字段会保留原来的值-->
    <update id="dynamicUpdate">
        UPDATE product
        <set>
            <if test="title!=null">title=#{title},</if>
            <if test="price!=null">price=#{price},</if>
            <if test="num!=null">num=#{num}</if>
        </set>
        WHERE id=#{id}
    </update>
</mapper>
